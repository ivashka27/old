Как это работает?

Запуск:
 - запустить main.cpp
 - введя команду help можно узнать, как взаимодействовать с программой

Реализация:

 - Так как нам нужно построить дерево, зададим class, который будет у элементов.("struct.hpp", "struct.cpp")
   Назовем этот класс - IncludedModule

 - Так же нужен класс для самого дерева - IncludedModuleList ("allmodules.hpp", "allmodules.cpp")
 	- есть только одна особенность - ограничение по количеству вершин в дереве(10^6).

 - ToSaveClass - class для кэширования поддеревьев(важная функция - определить не было ли превышено ограничение по количеству вершин дерева)

 - Парсинг файлов(Код можно посмотреть в файлах "getparsedinfo.hpp" и "regex_parser.cpp")
 	- По сути мы используем std::regex, как стратегию.
	- Что нам нужно извлечь? - информацию прописанную в include'ах. Собственно это мы и делаем, а затем передаем в IncludedModule Class
 	- В "regex_parser.cpp" также рассматриваются случаи с комментариями


Проблемы:
 - Проблемой, как раз, является ограничение на количество вершин дерева. Если увеличить данную константу, то при большом количестве вершин алгоритм будет медленно работать.
   Для полного решения этой проблемы стоило бы придумать какой-нибудь умный алгоритм, но в голову таковой еще не пришел.
 - Стратегия изспользование std::regex не всегда оптимальна, поэтому улучшением послужило бы придмать что-то свое.